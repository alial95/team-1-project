service: group-1
plugins:
  - serverless-python-requirements
  - serverless-iam-roles-per-function
provider:
  name: aws
  stage: dev
  region: eu-west-1
  environment:
    DB_CLUSTER: 'bir1-cluster'
    DB_HOST: 10.0.1.223
    DB_NAME: 'dev'
    DB_PASS: '*y3EoPZH*Luazyc#%i^xS#jc%n5$WSY^o%PThw!U'
    DB_PORT: 5439
    DB_USER: 'awsuser'
  
  

 

package:
  individually: true
  exclude:
    - node_modules/**
    - local_*
    - env/**

functions:
  group-1-extract:
    runtime: python3.8
    handler: extract.start
    module: group-1/extract
    events:
       - s3:
          bucket: cafe-transactions-group-1
          event: s3:ObjectCreated:Put
          existing: true 
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - lambda:InvokeFunction
        Resource: arn:aws:lambda:eu-west-1:579154747729:function:group-1-dev-group-1-extract
      - Effect: 'Allow'
        Action:
          - sqs:SendMessage
        Resource: !GetAtt ExtractToTransform.Arn
      - Effect: 'Allow'
        Action:
          - s3:Get*
          - s3:List*
        Resource: 
          - arn:aws:s3:::cafe-transactions-group-1
          - arn:aws:s3:::cafe-transactions-group-1/*
  group-1-load:
    runtime: python3.8
    handler: load.start
    module: load
    events:
      - sqs:
          arn: !GetAtt TransformToLoad.Arn
    iamRoleStatements: # IAM role statements so that services can be accessed in the AWS account
      - Effect: 'Allow'
        Action:
          - sqs:ReceiveMessage
        Resource: !GetAtt TransformToLoad.Arn
      - Effect: 'Allow'
        Action:
          - redshift:GetClusterCredentials
          - redshift:DescribeClusters
          - redshift-data:ExecuteStatement
        Resource: 
          - arn:aws:redshift:eu-west-1:579154747729:dbuser:bir1-cluster/awsuser
          - arn:aws:redshift:eu-west-1:579154747729:dbname:bir1-cluster/dev
    vpc:
      securityGroupIds:
        - sg-03601054033ee65d6
        - sg-04ffa039212cd915c
      subnetIds:
        - subnet-0b0c0f6ea99bda1ee
  group-1-transform:
    runtime: python3.8
    handler: transform.start
    module: group-1/transform
    events:
      - sqs:
          arn: !GetAtt ExtractToTransform.Arn
    iamRoleStatements: # IAM role statements so that services can be accessed in the AWS account
      - Effect: 'Allow'
        Action:
          - sqs:ReceiveMessage
          - sqs:SendMessage
          # - sqs:GetQueueUrl
        Resource: !GetAtt TransformToLoad.Arn

    

resources:
  Resources:
    ExtractToTransform: 
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: extract-to-transform
    # TransformToLoad:
    #   Type: "AWS::SQS::Queue"
    #   Properties:
    #     QueueName: transform-to-load
    TransformToLoad: 
        Type: AWS::SQS::Queue
        Properties: 
          RedrivePolicy: 
            deadLetterTargetArn: !GetAtt DeadLetterQueue.Arn
            maxReceiveCount: 5
          QueueName: transform-to-load    
    DeadLetterQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: group-1-dlq


